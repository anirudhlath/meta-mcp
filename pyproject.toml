[project]
name = "meta-mcp"
version = "0.1.0"
description = "Meta MCP Server with intelligent tool routing"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "mcp>=1.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "websockets>=12.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pyyaml>=6.0.1",
    "httpx>=0.25.0",
    "sentence-transformers>=2.2.2",
    "qdrant-client>=1.7.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "numpy>=1.24.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "psutil>=5.9.0",
    "gradio>=5.34.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.8",
    "mypy>=1.7.0",
]
web = [
    "jinja2>=3.1.0",
    "aiofiles>=23.2.0",
]

[project.scripts]
meta-mcp = "meta_mcp.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.8",
    "mypy>=1.7.0",
]

# Ruff configuration for linting AND formatting
[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["meta_mcp"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
